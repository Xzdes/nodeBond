// benchmark.js

const os = require('os');
const process = require('process');
const { dual } = require('./index');

const local = process.argv[2] || 'benchA';
const remote = process.argv[3] || 'benchB';

const bond = dual(local, remote);

let count = 0;
let lastCpu = process.cpuUsage();

bond.on('data', (msg) => {
  count++;
});

// –∫–∞–∂–¥—ã–µ 100–º—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ
setInterval(() => {
  bond.send({ from: local, time: Date.now(), text: 'ping' });
}, 100);

// –∫–∞–∂–¥—ã–µ 500–º—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º raw Buffer
setInterval(() => {
  const buffer = Buffer.from('raw-ping-' + Date.now());
  bond.send(buffer);
}, 500);

// –≤—ã–≤–æ–¥ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
setInterval(() => {
  const memory = process.memoryUsage().rss / 1024 / 1024;
  const cpu = process.cpuUsage(lastCpu);
  const cpuPercent = ((cpu.user + cpu.system) / 10000 / 2).toFixed(2);

  lastCpu = process.cpuUsage();
  const time = new Date().toLocaleTimeString();
  const stats = bond.stats?.() || {};

  console.log(`[${time}] üìä ping count: ${count}, üß† RAM: ${memory.toFixed(2)} MB, ‚öôÔ∏è CPU: ${cpuPercent}%`);
  console.log(`        üì§ sent: ${stats.messagesSent}, üì• received: ${stats.messagesReceived}, ‚è± uptime: ${Math.round(stats.uptimeMs / 1000)}s`);
}, 2000);

// –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
process.on('SIGINT', () => {
  console.log(`\n[STOP] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${count}`);
  console.log('[STATS]', bond.stats?.());
  bond.close();
  process.exit();
});
